1. Tomcat 
webapps folder 
(1) can put .war package 
(2) can put vue/iim/new-retail-dashboard

new-retail-dashboard includes:
static/
index.html

2. 微服务架构选型
(1) 微服务实例开发Spring Boot
(2) 服务的注册与发现Spring Cloud Eureka, Apache Zookeeper, Dubbo
(3) 负载均衡Spring Cloud Ribbon 和 Dubbo
(4) 服务容错使用Spring Cloud Hystrix
(5) API网关Spring Cloud Zuul, Spring Reactor, Netty or NodeJS
(6) 分布式配置中心 Spring Cloud Config
(7) 调试 Swagger
(8) 部署 Docker

(9) 持续集成 Jenkins
3. Spring Boot 优点
(1) 可快速构建独立的Spring应用程序
(2) 内嵌Servlet容器，无需单独安装容器即可独立运行项目
(3) 对主流开发框架的无配置集成
(4) 提供开箱即用的Spring插件，简化了Maven, Gradle的配置
(5) 自动配置Spring, 极大地提高了开发，部署效率
(6) 无需任何XML配置

4. JVM 堆设置
JVM堆内存分为2块：Permanent Space 和 Heap Space。

Permanent 即 持久代（Permanent Generation），主要存放的是Java类定义信息，与垃圾收集器要收集的Java对象关系不大。
堆内存分为两个部分：年轻代和老年代。我们平常所说的垃圾回收，主要回收的就是堆区。更细一点划分新生代又可划分为Eden区和2个Survivor区（From Survivor和To Survivor）。

新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )
默认的，Eden : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。

-Xmx   Java Heap最大值，默认值为物理内存的1/4，最佳设值应该视物理内存大小及计算机内其他内存开销而定；
-Xms   Java Heap初始值，Server端JVM最好将-Xms和-Xmx设为相同值，开发测试机JVM可以保留默认值；
-Xmn   Java Heap Young区大小，不熟悉最好保留默认值；
-Xss   每个线程的Stack大小，不熟悉最好保留默认值；
-XX:+UseParallelGC	启用并行GC

reference: https://www.cnblogs.com/jack204/archive/2012/07/02/2572932.html

5. Java JVM 运行时内存区

Java 运行时数据区包括堆，方法区，虚拟机栈， 本地方法栈和程序计数器

线程私有的包括：虚拟机栈，本地方法栈和程序计数器
线程共享的包括: 堆，方法区

虚拟机栈： Java虚拟机栈也是线程私有的，生命周期与线程相同。每个Java方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用、动态链接、程序出口等信息。
         可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小： java -Xss 512M

本地方法栈： 与Java虚拟机栈类似，虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。

程序计数器：记录正在执行的虚拟机字节码指令的地址。由于是多线程，线程轮流切换，切换线程后为了能恢复到正常的执行位置，每个线程需要一个独立的程序计数器。如果执行的是本地（Naive）方法，计数器为空。

JVM 堆： Java堆是整个虚拟机所管理的最大内存区域，所有的对象创建都是在这个区域进行内存分配，是被所有线程共享的一块内存区域，在虚拟机启动时创建，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。
        Java堆是垃圾收集器管理的主要区域（方法区也需要回收），因此又称为GC堆(Garbage Collected Heap)。现在收集器基本采用分代收集算法，可以将堆分为新生代和老年代。
        可以通过 -Xms 和 -Xmx 两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。

方法区： 与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
       在HotSpot虚拟机中，把方法区当做永久代来进行GC。
       垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。由于方法区主要存储类的相关信息，所以对于动 态生成类的情况比较容易出现永久代的内存溢出。
       在JDK1.8中，已经移除了永久代，用元空间来替代。元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。











