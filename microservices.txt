1. Tomcat 
webapps folder 
(1) can put .war package 
(2) can put vue/iim/new-retail-dashboard

new-retail-dashboard includes:
static/
index.html

2. 微服务架构选型
(1) 微服务实例开发Spring Boot
(2) 服务的注册与发现Spring Cloud Eureka, Apache Zookeeper, Dubbo
(3) 负载均衡Spring Cloud Ribbon 和 Dubbo
(4) 服务容错使用Spring Cloud Hystrix
(5) API网关Spring Cloud Zuul, Spring Reactor, Netty or NodeJS
(6) 分布式配置中心 Spring Cloud Config
(7) 调试 Swagger
(8) 部署 Docker

(9) 持续集成 Jenkins
3. Spring Boot 优点
(1) 可快速构建独立的Spring应用程序
(2) 内嵌Servlet容器，无需单独安装容器即可独立运行项目
(3) 对主流开发框架的无配置集成
(4) 提供开箱即用的Spring插件，简化了Maven, Gradle的配置
(5) 自动配置Spring, 极大地提高了开发，部署效率
(6) 无需任何XML配置

4. JVM 堆设置
JVM堆内存分为2块：Permanent Space 和 Heap Space。

Permanent 即 持久代（Permanent Generation），主要存放的是Java类定义信息，与垃圾收集器要收集的Java对象关系不大。
堆内存分为两个部分：年轻代和老年代。我们平常所说的垃圾回收，主要回收的就是堆区。更细一点划分新生代又可划分为Eden区和2个Survivor区（From Survivor和To Survivor）。

新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )
默认的，Eden : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。

-Xmx   Java Heap最大值，默认值为物理内存的1/4，最佳设值应该视物理内存大小及计算机内其他内存开销而定；
-Xms   Java Heap初始值，Server端JVM最好将-Xms和-Xmx设为相同值，开发测试机JVM可以保留默认值；
-Xmn   Java Heap Young区大小，不熟悉最好保留默认值；
-Xss   每个线程的Stack大小，不熟悉最好保留默认值；
-XX:+UseParallelGC	启用并行GC

reference: https://www.cnblogs.com/jack204/archive/2012/07/02/2572932.html

5. Java JVM 运行时内存区

Java 运行时数据区包括堆，方法区，虚拟机栈， 本地方法栈和程序计数器

线程私有的包括：虚拟机栈，本地方法栈和程序计数器
线程共享的包括: 堆，方法区

虚拟机栈： Java虚拟机栈也是线程私有的，生命周期与线程相同。每个Java方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用、动态链接、程序出口等信息。
         可以通过 -Xss 这个虚拟机参数来指定每个线程的 Java 虚拟机栈内存大小： java -Xss 512M

本地方法栈： 与Java虚拟机栈类似，虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。

程序计数器：记录正在执行的虚拟机字节码指令的地址。由于是多线程，线程轮流切换，切换线程后为了能恢复到正常的执行位置，每个线程需要一个独立的程序计数器。如果执行的是本地（Naive）方法，计数器为空。

JVM 堆： Java堆是整个虚拟机所管理的最大内存区域，所有的对象创建都是在这个区域进行内存分配，是被所有线程共享的一块内存区域，在虚拟机启动时创建，此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数组都在这里分配内存。
        Java堆是垃圾收集器管理的主要区域（方法区也需要回收），因此又称为GC堆(Garbage Collected Heap)。现在收集器基本采用分代收集算法，可以将堆分为新生代和老年代。
        可以通过 -Xms 和 -Xmx 两个虚拟机参数来指定一个程序的堆内存大小，第一个参数设置初始值，第二个参数设置最大值。

方法区： 与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。
       在HotSpot虚拟机中，把方法区当做永久代来进行GC。
       垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。由于方法区主要存储类的相关信息，所以对于动 态生成类的情况比较容易出现永久代的内存溢出。
       在JDK1.8中，已经移除了永久代，用元空间来替代。元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制。


6. Java synchronized 

synchronized 是 Java 中的关键字，是利用锁的机制来实现同步的。

互斥性：即在同一时间只允许一个线程持有某个对象锁，通过这种特性来实现多线程中的协调机制，这样在同一时间只有一个线程对需同步的代码块(复合操作)进行访问。互斥性我们也往往称为操作的原子性。

可见性：必须确保在锁被释放之前，对共享变量所做的修改，对于随后获得该锁的另一个线程是可见的（即在获得锁时应获得最新共享变量的值），否则另一个线程可能是在本地缓存的某个副本上继续操作从而引起不一致。

当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。

//synchronized修饰一个方法时，这个方法叫同步方法。
public synchronized void test() {
//方法体``

}

synchronized（Object） {
//括号中表示需要锁的对象.
//线程执行的时候会对Object上锁
}


7. Java ReentrantLock


synchronized vs ReentrantLock

(1) 这两种方式最大区别就是对于Synchronized来说，它是java语言的关键字，是原生语法层面的互斥，需要jvm实现。而ReentrantLock它是JDK 1.5之后提供的API层面的互斥锁，需要lock()和unlock()方法配合try/finally语句块来完成。
(2) synchronized既可以修饰方法，也可以修饰代码块。


private ReentrantLock lock = new ReentrantLock();
public void run() {
    lock.lock();
    try{
        for(int i=0;i<5;i++){
            System.out.println(Thread.currentThread().getName()+":"+i);
        }
    }finally{
        lock.unlock();
    }
}

ReentrantLock是Lock的实现类，是一个互斥的同步器，在多线程高竞争条件下，ReentrantLock比synchronized有更加优异的性能表现。

1 用法比较
Lock使用起来比较灵活，但是必须有释放锁的配合动作
Lock必须手动获取与释放锁，而synchronized不需要手动释放和开启锁
Lock只适用于代码块锁，而synchronized可用于修饰方法、代码块等

2 特性比较

ReentrantLock的优势体现在：

具备尝试非阻塞地获取锁的特性：当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁
能被中断地获取锁的特性：与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会被抛出，同时锁会被释放
超时获取锁的特性：在指定的时间范围内获取锁；如果截止时间到了仍然无法获取锁，则返回

3 注意事项

在使用ReentrantLock类的时，一定要注意三点：

在finally中释放锁，目的是保证在获取锁之后，最终能够被释放
不要将获取锁的过程写在try块内，因为如果在获取锁时发生了异常，异常抛出的同时，也会导致锁无故被释放。
ReentrantLock提供了一个newCondition的方法，以便用户在同一锁的情况下可以根据不同的情况执行等待或唤醒的动作。

